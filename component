import { useState, ReactNode, createContext, useContext } from "react";
import React from "react";
import ShoppingCart from "~/components/ShoppingCart";

type ShoppingCardProviderProps = {
  children: ReactNode
}

type ShoppingCartContext = {
  openCart: () => void
  closeCart: () => void
  getItemQuantity: (id: number) => number
  increaseCartQuantity: (id: number) => void 
  decreaseCartQuantity: (id: number) => void 
  removeFromCart: (id: number) => void
  cartQuantity: number
  cartItems: CartItem[]

}

type CartItem = {
  id: number
  quantity: number

}

const ShoppingCartContext = createContext({} as ShoppingCartContext)

export function useShoppingCart() {
  return useContext(ShoppingCartContext)
}

export function ShoppingCartProvider({ children }: ShoppingCardProviderProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [ cartItems, setCartItems ] = useState<CartItem[]>([])

  const getItemQuantity = (id: number) => {
    return cartItems.find(item => item.id === id)?.quantity || 0
  }

  const openCart = () => setIsOpen(true)
  const closeCart = () => setIsOpen(false)

  const increaseCartQuantity = (id: number) => {
    setCartItems(currItems => {
      // If you don't find add it
      if (currItems.find(item => item.id === id) == null) {
        return [...currItems, { id, quantity: 1}]
      }

      // If you find it increment by one
      return currItems.map(item => {
        if (item.id == id) {
          return { ...item, quantity: item.quantity + 1}

        }
        return item;
      })

    })
  }

  const decreaseCartQuantity = (id: number) => {
    setCartItems(currItems => {
      // If you don't find add it
      if (currItems.find(item => item.id === id)?.quantity == 1) {
        return currItems.filter(item => item.id !== id)
      }

      // If you find it increment by one
      return currItems.map(item => {
        if (item.id == id) {
          return { ...item, quantity: item.quantity - 1}

        }
        return item;
      })

    })
  }

  const removeFromCart = (id: number)  => { 
    setCartItems(currItems => {
        return currItems.filter(item => item.id !== id)
    })
  }

  const cartQuantity = cartItems.reduce((quantity, item) => item.quantity + quantity, 0)

  return (
    <ShoppingCartContext.Provider
      value= {{
        getItemQuantity,
        increaseCartQuantity,
        decreaseCartQuantity,
        removeFromCart,
        openCart,
        closeCart,
        cartQuantity,
        cartItems,
        }}>
      {children}
      <ShoppingCart isOpen={isOpen} />
    </ShoppingCartContext.Provider>
  )
}